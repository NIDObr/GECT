#!/bin/bash
#-------------------------------------------------------------------------------

# Autor: Minemam
# Ultima modificação: 09/10/19
# Versão: 0.9.3-BETA
# contato: coqecoisa@gmail.com || imperioqwerty@outlook.com
# Sobre: Use seu PC como "placa de captura" para seu smartphone
#-------------------------------------------------------------------------------
# Todo o codigo fonte está sob á Licença GPL-2
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Areá de Variavies:
#-------------------------------------------------------------------------------

conf_file="/etc/gect-betagect.conf"
versao="0.9.3-BETA"
wifi_ins=$(cat << TEXT
 Siga estes passos para conectar via WI-FI:
 1 ° passo:
     O smartphone precisa estar conectado
     via USB com a depuração ativada.
 2° passo:
     Após isso espere a mensagem para poder
     desconectar o USB.
 3° passo:
     Configure o IP e pronto.
TEXT
)
red="\033[1;31m"
blue="\033[1;34m"
yelow="\033[1;33m"
gren="\033[1;32m"
bd_blue="\033[44;1;37m"
bg_red="\033[41;1;37m"
bg_purple="\033[45;1;37m"
norm="\033[m"

#-------------------------------------------------------------------------------
# Areá de funções:
#-------------------------------------------------------------------------------

func_menu(){
	qt_dv=1
	for i in `adb devices -l | grep "model:"  | awk -F "model:" '{print $2}' | awk -F " " '{print $1}'` ;do
		if [[ ${qt_dv} = 1 ]];then
			printf $i > /tmp/adb_screen/dev_list
			((qt_dv++))
		else
			dev_list_tmp=$(cat /tmp/adb_screen/dev_list)
			printf "${dev_list_tmp}|${i}" > /tmp/adb_screen/dev_list
			((qt_dv++))
		fi
	done
	if [ -e /tmp/adb_screen/dev_list ];then
		dev_list=$(cat /tmp/adb_screen/dev_list)
	else
		dev_list="Dispositivo não encontrado."
	fi
	op_menu=$(zenity --cancel-label="Sair" --ok-label="Iniciar" --extra-button="Mais" --forms --title="GECT" --text="Menu Principal." --separator="." --add-entry="Nome:" --add-combo="Dispositivos:" --combo-values="${dev_list}" --add-combo="Modo:" --combo-values="Gravar|Espelhar" --add-list="Resoluçao:" --list-values="1080p|720p|480p|360p|240p|Nativa|Outra" --add-combo="Bit-rate:" --combo-values="Padrão|Personalizado")
	if [[ $cod_exit = 1 ]]||[[ -z $op_menu ]];then exit 1   # Encerra o programa caso o usuario aperte em cancelar o feche a janela.	
	elif [ "$op_menu" = "Mais" ];then mais_op;fi
	nome=$(printf $op_menu | awk -F . '{print $1}')
	dev_name=$(printf $op_menu | awk -F . '{print $2}')    # Dispositivo usado. ( EM TESTE! )
	modo=$(printf $op_menu | awk -F . '{print $3}')
	reso=$(printf $op_menu | awk -F . '{print $4}' | awk -F , '{print $1}')
	bit_esq=$(printf $op_menu | awk -F . '{print $5}')
	if [ -z "$nome" ]||[ -z $dev_name ]||[ -z $modo ]||[ -z $reso ]||[ -z $bit_esq ];then zenity --width=100 --height=30 --error --text="Erro!" --title="GECT ${versao}" ; func_menu;fi    # Verifica se as variaveins são validas.
	dev=$(adb devices -l | grep "${dev_name}" | awk -F "transport_id:" '{print $2}')
	case $reso in    # Define os parametos com base na resolução.
		1080p)aler=1;max_bit=60;re_bit=32;res=" --size=1920x1080";;
		720p)max_bit=32;re_bit=24;res=" --size=1280x720";;
		480p)max_bit=30;re_bit=14;res=" --size=800x480";;
		360p)max_bit=20;re_bit=10;res=" --size=480x360";;
		Nativa)max_bit=40;re_bit=28;res="";;
		Outra)max_bit=40;re_bit=26;res=$(zenity --width=400 --height=100 --entry --entry-text="Ex: 1280x720" --text="Defina uma resolução personalizada: " --title="GECT ${versao}");;
	esac
	if [[ $aler = 1 ]];then zenity --info --width=400 --height=100 --ok-label="Estou ciente" --text="Resolução muito alta resultara em arquivos muito grandes" --title="GECT ${versao}";fi
	case $bit_esq in
		Padrão)bit=$re_bit;;
		Personalizado)
			bit=$(zenity --width=400 --height=100 --scale --min-value=4 --max-value=${max_bit} --value=${re_bit} --text="Escolha a taxa de Megabits do video?" --title="GECT ${versao}")	# Taxa de bits
			if [ $? = 1 ];then exit 2;fi    # Encerra o programa caso o usuario aperte em cancelar o feche a janela.
		;;
	esac
	case $modo in
		"Gravar")gravar;;    # Chama função responsavel por gravar a tela do smartphone.
		"Espelhar")espelhar;;    # Chama função rsponsavel pelo espelhamento de tela.
	esac
}
var_reset(){
	dir_ppc=$(sed -n '16p' ${conf_file})    # Diretorio das partes de video (PC).
	dir_psp=$(sed -n '20p' ${conf_file})    # Diretorio das partes de video (Smartphone).
	dir_au=$(sed -n '24p' ${conf_file})    # Diretorio do arquivo de audio.
	dir_f=$(sed -n '28p' ${conf_file})    # Diretorio do arquivo final.
	au_rec=$(sed -n '38p' ${conf_file})    # Ativa ou desativa a gravação de audio.
	source_rec=$(sed -n '43p' ${conf_file})    # Dispositivo usado para captura de audio.
	lib_au=$(sed -n '47p' ${conf_file})    # Codec de audio usado.
	bit_au=$(sed -n '51p' ${conf_file})    # Taxa de bit do audio.
	tx_au=$(sed -n '55p' ${conf_file})    # Taxa de amostragem.
	f_au=$(sed -n '59p' ${conf_file})    # Formato do audio gravado.
	pull_mod=$(sed -n '71p' ${conf_file})    # Configura se vai baixar as partes durante ou depois.
	au_clip=$(sed -n '75p' ${conf_file})    # Configura se juntar a trilha de audio ao video.
	func_menu
}
mais_op(){
	mais=$(zenity --width=150 --height=200 --cancel-label="Voltar" --extra-button="Transmitir" --list --text="Mais opçães" --column "O que deseja fazer?" --title="GECT ${versao}" \
	  'Conectar via WI-FI' \
	  'Listar Dispositivos' \
	  'Configurar' \
	  'Sobre' )
	case $? in
		'1')func_menu;;
		`[ -z $mais ]`)func_menu;;
	esac
	case $mais in
		'Conectar via WI-FI')func_wifi;;    # Chama função responsavel por conectar o smartphone via wi-fi.
		'Listar Dispositivos')	# Lista os dispositivos disponiveins.
			lista_dis=$(adb devices -l)
			zenity --width=700 --height=100 --info --text="$lista_dis" --title="GECT ${versao}"
			func_menu    # Chama a função principal.
		;;
		'Configurar')
			conf_gect
		;;
		'Sobre')    # Exibe informações sobre o programa.
#			zenity --text-info --html --width=510 --height=500 --filename="/etc/gect-beta/sobre_prog" --title="GECT ${versao}"		
			sob_op=$(zenity --text-info --html --extra-button="Chang-Log" --width=510 --height=500 --filename="sobre_prog" --title="GECT ${versao}")
			if [[ $? = 1 ]];then exit 3
			elif [ $sob_op = "Chang-Log" ];then
				zenity --text-info --html --width=400 --height=500 --filename="change_log" --title="GECT ${versao}"
			fi
			func_menu    # Chama a função principal.
		;;
	esac
}
func_wifi(){    # Conecta via WI-FI (em teste, pode apresentar instabilidade).
	zenity --question --cancel-label="USB" --ok-label="IP" --text="Configurar via USB ou Inserir IP" --width=200 --height=100 --title="GECT ${versao}"
	if [[ $? = 1 ]];then
		ver_conec
		if [ ! -e ~/.config/GECT/wifi_ins ];then    # Verfica se o arquivo existe.
			> ~/.config/GECT/wifi_ins    # Caso não exista cria
			zenity --width=400 --height=200 --info --text="$wifi_ins" --title="GECT ${versao}"    # Mostra as instruções para conectar via WI-eI
			if [[ $? = 1 ]];then func_menu ;fi    # Chama a função principal.
		fi
		zenity --width=100 --height=100 --info --text="Conecte o cabo USB" --title="GECT ${versao}"
		adb -t ${dev} tcpip 5555    # Define a porta usada pelo ADB.
		if [[ $? = 1 ]];then
			zenity --width=250 --height=30 --error --text="Erro! Verifique se o smartphone esta conectado via USB" --title="GECT ${versao}"
			func_menu    # Chama a função principal.
		fi
		zenity --width=400 --height=200 --info --text="Pode desconectar o cabo USB" --title="GECT ${versao}"
	fi
	ip_dis=$(zenity --width=400 --height=100 --entry --entry-text="Ex: 192.168.1.2" --text="Qual o ip do smartphone?" --title="GECT ${versao}")
	if [[ $? = 1 ]];then func_menu    # Chama a função principal.
	elif [[ -z $ip_dis ]];then
		zenity --width=250 --height=30 --error --text="Erro! IP invalido" --title="GECT ${versao}"
		func_wifi    # Inicia a função novamente.
	else
		con_est=$(adb connect ${ip_dis})    # Conecta no smartphone.
		zenity --width=200 --height=100 --info --text="$con_est" --title="GECT ${versao}"; sleep 2 ; func_menu    # Chama a função principal.
	fi
}
conf_gect(){    # Configuraçoẽs
	configur=$(zenity --width=150 --height=200 --cancel-label="Sair" --ok-label="Voltar" --extra-button="Transmitir" --list --text="Mais opçães" --column "O que deseja fazer?" --title="GECT ${versao}" 'Configurar diretorios.' 'Configurar audio.' 'Configuraçoẽs globais.' ) || func_menu    # Encerra o programa caso o usuario aperte em cancelar o feche a janela.
	case $configur in
	'Configurar diretorios.')
		qt_cfg=1
		conf_dir=$(zenity --cancel-label="Cancelar" --ok-label="Aplicar" --forms --title="GECT" --text="Configuraçoẽs de diretorio." --separator="°" --add-entry="Diretorio temporario (PC): " --add-entry="Diretorio temporario (Smartphone): " --add-entry="Diretorio audio (PC): " --add-entry="Diretorio Final (PC): ")
		dir_ppc_cfg=$(printf "$conf_dir" | awk -F "°" '{print $1}' | sed -r 's/\//\\\//g')
		dir_psp_cfg=$(printf "$conf_dir" | awk -F "°" '{print $2}' | sed -r 's/\//\\\//g')
		dir_au_cfg=$(printf "$conf_dir" | awk -F "°" '{print $3}' | sed -r 's/\//\\\//g')
		dir_f_cfg=$(printf "$conf_dir" | awk -F "°" '{print $4}' | sed -r 's/\//\\\//g')
		for i in "${dir_ppc_cfg}" "${dir_psp_cfg}" "${dir_au_cfg}" "${dir_f_cfg}" ;do
			if [ -z $i ];then
				case $qt_cfg in
					1)dir_ppc_cfg=$dir_ppc;;
					2)dir_psp_cfg=$dir_psp;;
					3)dir_au_cfg=$dir_au;;
					4)dir_f_cfg=$dir_f;;
				esac
				((qt_cfg++))
			else
				((qt_cfg++))
			fi
		done
		dir_ppc=$(printf ${dir_ppc} | sed -r 's/\//\\\//g')
		dir_psp=$(printf ${dir_ppc} | sed -r 's/\//\\\//g')
		dir_au=$(printf ${dir_ppc} | sed -r 's/\//\\\//g')
		dir_f=$(printf ${dir_ppc} | sed -r 's/\//\\\//g')
		sed -i "16s/"${dir_ppc}"/"${dir_ppc_cfg}"/" ${conf_file}
		sed -i "20s/"${dir_psp}"/"${dir_psp_cfg}"/" ${conf_file}
		sed -i "24s/"${dir_au}"/"${dir_au_cfg}"/" ${conf_file}
		sed -i "28s/"${dir_f}"/"${dir_f_cfg}"/" ${conf_file}
		var_reset
	;;
	'Configurar audio.')
		rm /tmp/sou*.tmp
		qt_cfg=1
		qt2_cfg=1
		> /tmp/soucers.tmp
		pactl list sources | grep "Name:" | awk -F : -F " " '{print $2}' > /tmp/sou.tmp
		for i in `cat /tmp/sou.tmp` ;do
			soucers_tmp=$(cat /tmp/soucers.tmp)
			if [[ $qt2 = 1 ]];then printf $i > /tmp/soucers.tmp ;fi
			printf "$soucers_tmp|$i" > /tmp/soucers.tmp
		done
		sou_ava=$(cat /tmp/soucers.tmp)
		conf_au=$(zenity --cancel-label="Cancelar" --ok-label="Aplicar" --forms --title="GECT" --text="Configuraçoẽs de audio." --separator="°" --add-combo="Gravar audio:" --combo-values="YES|NO" --add-combo="Source:" --combo-values="${sou_ava}" --add-combo="Codec de audio:" --combo-values="libvorbis|libmp3lame|aac|libopus|flac|Outra" --add-combo="Bit-rate:" --combo-values="56k|96k|128k|256k|320k|Personalizado" --add-combo="Taxa de amostragem:" --combo-values="11025|22050|44100|48000|Personalizado" --add-combo="Formato:" --combo-values="mp3|oga|aac|opus|flac|Personalizado")
		au_rec_cfg=$(printf "$conf_au" | awk -F "°" '{print $1}')
		source_rec_cfg=$(printf "$conf_au" | awk -F "°" '{print $2}')
		lib_au_cfg=$(printf "$conf_au" | awk -F "°" '{print $3}')
		bit_au_cfg=$(printf "$conf_au" | awk -F "°" '{print $4}')
		tx_au_cfg=$(printf "$conf_au" | awk -F "°" '{print $5}')
		f_au_cfg=$(printf "$conf_au" | awk -F "°" '{print $6}')
		for i in "${au_rec_cfg}" "${source_rec_cfg}" "${lib_au_cfg}" "${bit_au_cfg}" "${tx_au_cfg}" "${f_au_cfg}" ;do
			if [ -z $i ];then
				case $qt_cfg in
					1)au_rec_cfg=$au_rec;;
					2)source_rec_cfg=$source_rec;;
					3)lib_au_cfg=$lib_au;;
					4)bit_au_cfg=$bit_au;;
					5)tx_au_cfg=$tx_au;;
					6)f_au_cfg=$f_au;;
				esac
				((qt_cfg++))
			else
				((qt_cfg++))
			fi		
		done
		if [ "${lib_au_cfg}" = "Personalizado" ];then
			lib_au_cfg=$(zenity --width=400 --height=100 --entry --entry-text="Ex: libvorbis" --text="Qual o codec?" --title="GECT ${versao}")
		fi
		if [ "${bit_au_cfg}" = "Personalizado" ];then
			bit_au_cfg=$(zenity --width=400 --height=100 --entry --entry-text="Ex: 320k" --text="Qual a taxa de bits (k)" --title="GECT ${versao}")
		fi
		if [ "${tx_au_cfg}" = "Personalizado" ];then
			tx_au_cfg=$(zenity --width=400 --height=100 --entry --entry-text="Ex: 44100" --text="Qual a taxa de amostragem" --title="GECT ${versao}")
		fi
		if [ "${f_au_cfg}" = "Personalizado" ];then
			f_au_cfg=$(zenity --width=400 --height=100 --entry --entry-text="Ex: ogg" --text="Qual o formato?" --title="GECT ${versao}")
		fi
		sed -i "38s/"${au_rec}"/"${au_rec_cfg}"/" ${conf_file}    # Modifica 
		sed -i "43s/"${source_rec}"/"${source_rec_cfg}"/" ${conf_file}    # Modifica o estado ligado ou desligado do audio.
		sed -i "47s/"${lib_au}"/"${lib_au_cfg}"/" ${conf_file}    # Modifica o codec usado.
		sed -i "51s/"${bit_au}"/"${bit_au_cfg}"/" ${conf_file}    # Modifica a taxa de bits.
		sed -i "55s/"${tx_au}"/"${tx_au_cfg}"/" ${conf_file}    # Modifica a taxa de amostragem.
		sed -i "59s/"${f_au}"/"${f_au_cfg}"/" ${conf_file}    # Modifica o formato do audio gravado.
		var_reset
	;;
	'Configuraçoẽs globais.')
		qt_cfg=1
		conf_glob=$(zenity --cancel-label="Cancelar" --ok-label="Aplicar" --forms --title="GECT" --text="Configuraçoẽs globais." --separator="°" --add-combo="Baixar partes durante ou depois da gravação." --combo-values="Durante|Depois" --add-combo="Juntar audio e video durante o processamento." --combo-values="Sim|Não")
		pull_mod_cfg=$(printf "$conf_glob" | awk -F "°" '{print $1}')
		au_clip_cfg=$(printf "$conf_glob" | awk -F "°" '{print $2}')
		for i in "${pull_mod_cfg} ${au_clip_cfg}" ;do
			if [[ -z $i ]];then
				case $qt_cfg in
					1)pull_mod_cfg=$pull_mod;;
					2)au_clip_cfg=$au_clip;;
				esac
				((qt_cfg++))
			else
				((qt_cfg++))
			fi		
		done
		if [ "${pull_mod_cfg}" = "Durante" ];then pull_mod_cfg=0
		else pull_mod_cfg=1 ;fi
		if [ "${au_clip_cfg}" = "Durante" ];then au_clip_cfg=YES
		else au_clip_cfg=NO ;fi
		sed -i "71s/"${pull_mod}"/"${pull_mod_cfg}"/" ${conf_file}    # Modifica
		sed -i "75s/"${au_clip}"/"${au_clip_cfg}"/" ${conf_file}    # Modifica
		var_reset
	;;
	esac
}
ver_conec(){    # Verifica se a algun dispositivo conectado. ( EM TESTE! )
	if ! adb get-state > /dev/null;then
		zenity --width=250 --height=30 --error --text="Erro! Verifique se o smartphone esta conectado!" --title="GECT ${versao}"
		rm /tmp/adb_screen/* ; mkdir -p /tmp/adb_screen/video/ ; mkdir -p ~/Videos/ADB # Reseta o estatus de funcionamento.
		func_menu    # Chama a função principal.
	fi
	ver_cen &
}
ver_cen(){
	while [ -e /tmp/adb_screen/on_func ];do
		if ! adb get-state > /dev/null ;then
			b=1
			rm -rf /tmp/adb_screen
			killall adb
			killall ffmpeg
			zenity --width=250 --height=30 --error --text="Erro! Verifique se o smartphone esta conectado!" --title="GECT ${versao}"
			break
		fi
	done
	exit 8
}
espelhar(){
	ver_conec    # Chama função responsavel por verificar se a algum dispositivo conectado.
	adb -t ${dev} shell screenrecord --output-format=h264 --bit-rate=${bit_esq}00000${reso} - . | ffplay -    # TESTAR! (redirecionar a saida para o mplayer)
	if [[ $? = 1 ]];then
		zenity --width=250 --height=30 --error --text="Erro!" --title="GECT ${versao}"
		exit '10'
	fi
	func_menu    # Chama a função principal.
}
gravar(){    # Função responsavel por gravar a tela do smartphone.
	ver_conec    # Chama função responsavel por verificar se a algum dispositivo conectado.
	local qt=1
	rm /tmp/adb_screen/*    # Reseta o estatus de funcionamento
	> /tmp/adb_screen/on_func
	> /tmp/adb_screen/on
	> /tmp/adb_screen/on_au
	mod="Gravação"
	ence &    # Chama função responsavel por interromper a gravação do video.
	pull &    # Chama função responsavel por baixar as partes do video.
	if [ "${au_rec}" = "YES" ];then
		audio &
	fi
	rm -rf ${dir_psp}pt_*
	while [ -e /tmp/adb_screen/on ];do    # Enquanto o arquivo existir continua gravando.
		adb -t ${dev} shell screenrecord --verbose --time-limit=60${res} --bit-rate=${bit}000000 ${dir_psp}pt_${qt}.mp4    # Realiza a gravaçao
		((qt++))
	done
	rm /tmp/adb_screen/on_au
	qt2=$((qt--))
	printf $qt2 > /tmp/adb_screen/pt
	sleep 10
	adb -t ${dev} pull ${dir_psp}pt_${qt2}.mp4 ${dir_ppc}
	list_tmp=$(cat ${dir_ppc}.lista_partes)
	adb -t ${dev} shell rm ${dir_psp}pt_${qt2}.mp4    # Apaga a parte que ja foi baixada.
}
audio(){    # Use "pactl list sources"
	qta=1
	if [ ${au_clip} = "NO" ];then
		while [ -e /tmp/adb_screen/on_au ];do    # Enquanto o arquivo existir continua gravando.
			ffmpeg -f pulse -i ${source_rec} -c:a ${lib_au} -b:a ${bit_au} -ar ${tx_au} ${dir_au}track_${qta}.${f_au}
		done
	else
		while [ -e /tmp/adb_screen/on_au ];do    # Enquanto o arquivo existir continua gravando.
			ffmpeg -f pulse -i ${source_rec} -c:a ${lib_au} -b:a ${bit_au} -ar ${tx_au} -t 59 ${dir_au}track_${qta}.${f_au}
			case $qta in
				1)printf track_${qta}.${f_au} > /media/lubuntu/097F-30CC/GECT/.lista_parteau;;
				*)list_au_tmp=$(cat /media/lubuntu/097F-30CC/GECT/.lista_parteau) ; printf "${list_au_tmp} + track_${qta}.${f_au}" > /media/lubuntu/097F-30CC/GECT/.lista_parteau;;
			esac
			((qta++))
		done
	fi
}
pull(){    # Baixa partes do vídeo para economizar tempo. ( EM TESTE! )
	ver_conec    # Chama função responsavel por verificar se a algum dispositivo conectado.
	while [[ $pull_mod = 1 ]];do
		if [ -n /tmp/adb_screen/on ];then pull_mod=0 ;fi
	done
	qt_v=2
	local qt_pull=1
	local f_teste=1
	b=0
	while [ -e /tmp/adb_screen/on_func ];do    # funciona apenas enquanto este arquivo existir.
		for file in `adb -t ${dev} shell ls ${dir_psp}*.mp4`;do    # verifica os arquivos do diretorio e armazena em uma variavel para uso posterior.
			f_teste=$(printf $file | awk -F _ '{print $2}' | awk -F . '{print $1}')    # Verifica em preset parte esta.
			if [[ $f_teste = $qt_v ]];then    # Apenas baixa uma parte do video se a proxima ja estiver sendo gravada.
				sleep 5    # Espera 5 segundos antes de baixar a parte do video por garantia.
				adb -t ${dev} pull ${dir_psp}pt_${qt_pull}.mp4 ${dir_ppc}
				case $qt_pull in
					1)printf pt_${qt_pull}.mp4 > /media/lubuntu/097F-30CC/GECT/.lista_partes;;
					*)list_tmp=$(cat /media/lubuntu/097F-30CC/GECT/.lista_partes) ; printf "${list_tmp} + pt_${qt_pull}.mp4" > /media/lubuntu/097F-30CC/GECT/.lista_partes;;
				esac
				adb -t ${dev} shell rm ${dir_psp}pt_${qt_pull}.mp4    # Apaga a parte que ja foi baixada.
				((qt_v++))    # Auto incremento.
				((qt_pull++))    # Auto incremento.
			elif [[ -z $file ]];then
				rm /tmp/adb_screen/on_func
				break
			fi
		done
	done
	if [[ $b = 0 ]];then processamento ;fi    # Chama funcão processamento caso não tenha ocorrido erros anteriores.
}
ence(){    # Encerra o vídeo
	if [ -e /tmp/adb_screen/on ];then
		zenity --width=400 --height=100 --info --ok-label="Encerrar ${mod}" --text="Gravação do video ${nome} em progresso" --title="Screenrecorder ${title_mod} ${versao}"
		rm /tmp/adb_screen/on
		rm /tmp/adb_screen/on_au
		zenity --width=400 --height=100 --info --text="Processando video aguarde" --title="GECT ${versao}" &
	fi
}
processamento(){	# Processamento inicial do video
	cd ${dir_ppc}
	local cod_v=0
	local cod_a=0
	local cod_va=0
	local cod_all=0
	local pt=$(cat /tmp/adb_screen/pt)
	local list_tmp=$(cat /media/lubuntu/097F-30CC/GECT/.lista_partes)
	printf "${list_tmp} + pt_${pt}.mp4" > /media/lubuntu/097F-30CC/GECT/.lista_partes	
	local list=$(cat ${dir_ppc}.lista_partes)
	if [ "${au_rec}" = "YES" ]&&[ ${au_clip} = "YES" ];then
		mkvmerge -o "${nome}"_.mp4 ${list} || cod_v=5    # Mescla as partes do video formando um unico video.
		mkvmerge -o track.${f_au} ${list_au} || cod_a=6   # Mescla as partes do audio formando um unico video.
		mkvmerge -o "${nome}".mp4 "${nome}"_.mp4 track.${f_au} || cod_va=7   # Mescla o video e o audio formando um unico video.
		cod_all="${cod_v} ${cod_a} ${cod_va}"
		if [[ ! "${cod_all}" = '000' ]];then
			zenity --width=400 --height=100 --info --text="ERRO no rocessamento do video cod: ${cod_all}" --title="GECT ${versao}"
			exit 5
		fi
	else
		mkvmerge -o "${nome}".mp4 "${nome}"_.mp4 track.${f_au} || cod_v=8
		if [[ ! ${cod_v} = 0 ]];then
			zenity --width=400 --height=100 --info --text="ERRO no rocessamento do video cod: ${cod_v}" --title="GECT ${versao}"
			exit 6
		fi
	fi
	if mv "${nome}".mp4 ${dir_f} ;then
#		rm -f ${dir_ppc}*.mp4 ${dir_au}*.${f_au} /media/lubuntu/097F-30CC/GECT/.lista_partes
		zenity --width=400 --height=100 --info --text="Pronto! Já pode ver o seu video!" --title="GECT ${versao}" &
		killall mkvmerge
		exit 7
	fi
}
live_gect(){
	zenity --info --text="Em breve!" --title="GECT ${versao}"
	func_menu
}

#-------------------------------------------------------------------------------
# Fim área funções
#-------------------------------------------------------------------------------
 
rm -rf /tmp/adb_screen
if [ ! -e ~/.config/GECT/ ];then mkdir -p ~/.config/GECT ;fi    # Verifica se o diretorio exixte, caso não cria ele.
if [ ! -e ~/Videos/ADB ];then mkdir -p ~/Videos/ADB ;fi    # Verifica se o diretorio exixte, caso não cria ele.
if [ ! -e /tmp/adb_screen/video/ ];then mkdir -p /tmp/adb_screen/video/ ;fi    # Verifica se o diretorio exixte, caso não cria ele.

var_reset
